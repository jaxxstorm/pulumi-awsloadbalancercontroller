// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Awsloadbalancercontroller
{
    [AwsloadbalancercontrollerResourceType("awsloadbalancercontroller:index:deployment")]
    public partial class Deployment : Pulumi.ComponentResource
    {
        /// <summary>
        /// Create a Deployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Deployment(string name, DeploymentArgs args, ComponentResourceOptions? options = null)
            : base("awsloadbalancercontroller:index:deployment", name, args ?? new DeploymentArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class DeploymentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Region to deploy the controller to
        /// </summary>
        [Input("awsRegion")]
        public string? AwsRegion { get; set; }

        /// <summary>
        /// Name of the cluster the loadbalancer controller is being installed in
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The Docker Image to use for the controller deployment
        /// </summary>
        [Input("imageName")]
        public string? ImageName { get; set; }

        /// <summary>
        /// Ingress class for the controller to satisfy
        /// </summary>
        [Input("ingressClass")]
        public string? IngressClass { get; set; }

        /// <summary>
        /// Whether to install the CRDs for the LoadBalancer controller
        /// </summary>
        [Input("installCRDs", required: true)]
        public bool InstallCRDs { get; set; } = null!;

        /// <summary>
        /// The namespace to create to run the AWS Loadbalancer Controller in.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// The OIDC issuer for your EKS cluster
        /// </summary>
        [Input("oidcIssuer", required: true)]
        public string OidcIssuer { get; set; } = null!;

        /// <summary>
        /// The OIDC provider for your EKS cluster
        /// </summary>
        [Input("oidcProvider", required: true)]
        public string OidcProvider { get; set; } = null!;

        /// <summary>
        /// The version of the AWS ingress controller to deploy
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public DeploymentArgs()
        {
        }
    }
}
